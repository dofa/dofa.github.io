<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Embedded | dofa blog]]></title>
  <link href="http://dofa.org/blog/categories/embedded/atom.xml" rel="self"/>
  <link href="http://dofa.org/"/>
  <updated>2014-02-25T08:59:23+00:00</updated>
  <id>http://dofa.org/</id>
  <author>
    <name><![CDATA[dofa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[事件驱动的伪任务-UOS]]></title>
    <link href="http://dofa.org/blog/2013/10/17/Event-driven-pseudo-task-UOS/"/>
    <updated>2013-10-17T00:00:00+00:00</updated>
    <id>http://dofa.org/blog/2013/10/17/Event-driven-pseudo-task-UOS</id>
    <content type="html"><![CDATA[<h3>protothread</h3>

<p>protothread是专为资源有限的系统设计的一种耗费资源特别少并且不使用堆栈的线程模型</p>

<h3>相比于嵌入式操作系统， protothread其有如下优点：</h3>

<ul>
<li>以纯C语言实现，无硬件依靠性； 因此不存在移植的困难</li>
<li>极少的资源需求，每个 Protothread 仅需要2个额外的字节</li>
<li>支持阻塞操纵且没有栈的切换</li>
</ul>


<h3>protothread的缺陷在于：</h3>

<ul>
<li>函数中不具备可重入型，不能使用局部变量；</li>
<li>按顺序判断各任务条件是否满足，因此无优先级抢占；</li>
<li>任务中的各条件也是按顺序判断的，因此要求任务中的条件必须是依次出现的。</li>
</ul>


<h3>Uos的核心便是protothread</h3>

<ul>
<li>Uos使用protothread实现Task Switch</li>
<li>Uos另外一个先进的地方：event-driven</li>
</ul>


<h3>Uos的Task Switch和event-driven</h3>

<ul>
<li>Task Switch负责把任务所有权切换出去</li>
<li>切换任务之前，要设置触发事件</li>
<li>任务调度时，会根据是否有触发事件发生，调用该任务</li>
</ul>


<h3>UOS项目官网</h3>

<ul>
<li>project网址：<a href="http://www.uos.co">http://www.uos.co</a></li>
<li>github网址：<a href="https://github.com/bitbegin/uos">https://github.com/bitbegin/uos</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[big endian与little endian（大小端）]]></title>
    <link href="http://dofa.org/blog/2013/08/05/big-endian-and-little-endian/"/>
    <updated>2013-08-05T13:25:52+00:00</updated>
    <id>http://dofa.org/blog/2013/08/05/big-endian-and-little-endian</id>
    <content type="html"><![CDATA[<p>在C编程中，经常遇到大小端（big endian与little endian）的问题，尤其涉及到位域的情况，很容易出错。我这里总结下C51和HTCC C18两种compiler对大小端的处理。</p>

<h2>Check Endian code</h2>

<p>```c
char checkEndian(void)
{</p>

<pre><code>union check{
    unsigned int a;
    unsigned char b;
};
union check ck;
ck.a = 1;
return (ck.b==1) ;
</code></pre>

<p>}</p>

<p>void main(void)
{</p>

<pre><code>union uE{
    unsigned long num;
    struct{
        unsigned char a1:1;
        unsigned char b3:3;
        unsigned short c16;
        unsigned char d3:3;
        unsigned char e1:1;
    }sN;
};

union uE a;
char ttt =  checkEndian();

a.num = 0x12345678;
a.num = 0;

a.sN.a1 = 1;
a.sN.b3 = 2;
a.sN.c16 = 0x0304;
a.sN.d3 = 5;
a.sN.e1 = 1;

a.num;
</code></pre>

<p>}
```</p>

<h2>Executed results</h2>

<p>a.num = ?</p>

<p>对于big endian：</p>

<p>以C51来分析，结构成员按照定义顺序从小地址到大地址存放到ram中，显然按照地址从小到大排放结果就为：</p>

<p><code>c
05 03 04 0d
</code></p>

<p>转换为大端显示为：</p>

<p><code>c
0x0503040d
</code></p>

<p>对于little endian：</p>

<p>结果为</p>

<p><code>c
0x0d030405
</code></p>

<h2>Results</h2>

<p>所以我这里结论：</p>

<ul>
<li><p>位域没有大小端的区别，区别在于各编译器的实现。上面的例子便是没有区别的compiler，C51和HTCC C18；网络字节序位域有大小端区别，这个一定要注意</p></li>
<li><p>两个及其以上字节有大小端区别</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
