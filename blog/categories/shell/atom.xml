<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shell | Do Far]]></title>
  <link href="http://blog.dofa.org/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://blog.dofa.org/"/>
  <updated>2014-05-11T06:45:25-07:00</updated>
  <id>http://blog.dofa.org/</id>
  <author>
    <name><![CDATA[dofa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[bash快捷操作]]></title>
    <link href="http://blog.dofa.org/blog/2014/05/11/bash-shortcut/"/>
    <updated>2014-05-11T09:51:30-07:00</updated>
    <id>http://blog.dofa.org/blog/2014/05/11/bash-shortcut</id>
    <content type="html"><![CDATA[<p>经常使用bash，但是bash shell使用的效率一直不高，今天终于发现了有快捷键，赶快记录下来。</p>

<h2>编辑命令</h2>

<ul>
<li><code>Ctrl + a</code> ：移到命令行首</li>
<li><code>Ctrl + e</code> ：移到命令行尾</li>
<li><code>Ctrl + f</code> ：按字符前移（右向）</li>
<li><code>Ctrl + b</code> ：按字符后移（左向）</li>
<li><code>Alt + f</code> ：按单词前移（右向）</li>
<li><code>Alt + b</code> ：按单词后移（左向）</li>
<li><code>Ctrl + xx</code>：在命令行首和光标之间移动</li>
<li><code>Ctrl + u</code> ：从光标处删除至命令行首</li>
<li><code>Ctrl + k</code> ：从光标处删除至命令行尾</li>
<li><code>Ctrl + w</code> ：从光标处删除至字首</li>
<li><code>Alt + d</code> ：从光标处删除至字尾</li>
<li><code>Ctrl + d</code> ：删除光标处的字符</li>
<li><code>Ctrl + h</code> ：删除光标前的字符</li>
<li><code>Ctrl + y</code> ：粘贴至光标后</li>
<li><code>Alt + c</code> ：从光标处更改为首字母大写的单词</li>
<li><code>Alt + u</code> ：从光标处更改为全部大写的单词</li>
<li><code>Alt + l</code> ：从光标处更改为全部小写的单词</li>
<li><code>Ctrl + t</code> ：交换光标处和之前的字符</li>
<li><code>Alt + t</code> ：交换光标处和之前的单词</li>
<li><code>Alt + Backspace</code> ：与 <code>Ctrl + w</code> 类似</li>
</ul>


<h2>重新执行命令</h2>

<ul>
<li><code>Ctrl + r</code> ：逆向搜索命令历史</li>
<li><code>Ctrl + g</code> ：从历史搜索模式退出</li>
<li><code>Ctrl + p</code> ：历史中的上一条命令</li>
<li><code>Ctrl + n</code> ：历史中的下一条命令</li>
<li><code>Alt + .</code> ：使用上一条命令的最后一个参数</li>
</ul>


<h2>控制命令</h2>

<ul>
<li><code>Ctrl + l</code> ：清屏</li>
<li><code>Ctrl + o</code> ：执行当前命令，并选择上一条命令</li>
<li><code>Ctrl + s</code> ：阻止屏幕输出</li>
<li><code>Ctrl + q</code> ：允许屏幕输出</li>
<li><code>Ctrl + c</code> ：终止命令</li>
<li><code>Ctrl + z</code> ：挂起命令</li>
</ul>


<h2>Bang (!) 命令</h2>

<ul>
<li><code>!!</code> ：执行上一条命令</li>
<li><code>!blah</code> ：执行最近的以 <code>blah</code> 开头的命令，如 <code>!ls</code></li>
<li><code>!blah:p</code> ：仅打印输出，而不执行</li>
<li><code>!$</code> ：上一条命令的最后一个参数，与 <code>Alt + .</code> 相同</li>
<li><code>!$:p</code> ：打印输出 <code>!$</code> 的内容</li>
<li><code>!*</code> ：上一条命令的所有参数</li>
<li><code>!*:p</code> ：打印输出 <code>!*</code> 的内容</li>
<li><code>^blah</code> ：删除上一条命令中的 <code>blah</code></li>
<li><code>^blah^foo</code> ：将上一条命令中的 <code>blah</code> 替换为 <code>foo</code></li>
<li><code>^blah^foo^</code> ：将上一条命令中所有的 <code>blah</code> 都替换为 <code>foo</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh代理设置]]></title>
    <link href="http://blog.dofa.org/blog/2014/05/08/ssh-proxy-settings/"/>
    <updated>2014-05-08T13:28:50-07:00</updated>
    <id>http://blog.dofa.org/blog/2014/05/08/ssh-proxy-settings</id>
    <content type="html"><![CDATA[<p>有两种方式实现ssh代理，一种是ssh命令行，另外一种使用putty的plink工具。</p>

<h2>ssh命令行</h2>

<pre><code>ssh -qTfnN -D 8087 用户名@远程ssh主机名
</code></pre>

<p>上面的8087是本地未被占用的端口，可以自己选择。其它参数的意思是：</p>

<pre><code>-q :- be very quite, we are acting only as a tunnel.
-T :- Do not allocate a pseudo tty, we are only acting a tunnel.
-f :- move the ssh process to background, as we don’t want to interact with this ssh session directly.
-N :- Do not execute remote command.
-n :- redirect standard input to /dev/null. 
</code></pre>

<h4>remote端口占用</h4>

<pre><code>sudo netstat -antpl  | grep ssh
</code></pre>

<p><code>kill</code>进程</p>

<pre><code>sudo kill -9 xxxx
</code></pre>

<h2>plink工具</h2>

<pre><code>plink -C -D 127.0.0.1:8087 -N -pw 密码 用户名@远程ssh主机名 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用oh my zsh替代bash]]></title>
    <link href="http://blog.dofa.org/blog/2014/04/24/use-oh-my-zsh-instead-of-bash/"/>
    <updated>2014-04-24T14:30:50-07:00</updated>
    <id>http://blog.dofa.org/blog/2014/04/24/use-oh-my-zsh-instead-of-bash</id>
    <content type="html"><![CDATA[<h2>安装zsh</h2>

<pre><code>apt-get install zsh
</code></pre>

<h2>安装OH-My-ZSH</h2>

<h4>手动安装</h4>

<pre><code>cd ~
git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh

cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
</code></pre>

<p>设定为默认bash</p>

<pre><code>chsh -s /bin/zsh
</code></pre>

<h4>自动安装</h4>

<p>via <code>curl</code></p>

<pre><code>curl -L http://install.ohmyz.sh | sh
</code></pre>

<p>via <code>wget</code></p>

<pre><code>wget --no-check-certificate http://install.ohmyz.sh -O - | sh
</code></pre>

<h2>修改putty不能显示的字符</h2>

<p><code>~/.oh-my-zsh/themes/robbyrussell.zsh-theme</code></p>

<pre><code>#PROMPT='%{$fg_bold[red]%}➜ %{$fg_bold[green]%}%p %{$fg[cyan]%}%c %{$fg_bold[blue]%}$(git_prompt_info)%{$fg_bold[blue]%} % %{$reset_color%}'
PROMPT='%{$fg_bold[red]%}# %{$fg_bold[green]%}%p %{$fg[cyan]%}%c %{$fg_bold[blue]%}$(git_prompt_info)%{$fg_bold[blue]%} % %{$reset_color%}'
ZSH_THEME_GIT_PROMPT_PREFIX="git:(%{$fg[red]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
#ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[blue]%}) %{$fg[yellow]%}✗%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[blue]%}) %{$fg[yellow]%}X %{$reset_color%}"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg[blue]%})"
</code></pre>

<p>使用更改后的配置：</p>

<pre><code>source `~/.oh-my-zsh/themes/robbyrussell.zsh-theme`
</code></pre>

<h2>OH-My-ZSH的使用</h2>

<ul>
<li>强大的历史纪录功能，输入 grep 然后用上下箭头可以翻阅你执行的所有 grep 命令。</li>
<li>智能拼写纠正，输入gtep mactalk * -R，系统会提示：zsh: correct ‘gtep’ to ‘grep’ [nyae]? 比妹纸贴心吧，她们向来都是让你猜的……</li>
<li>各种补全：路径补全、命令补全，命令参数补全，插件内容补全等等。触发补全只需要按一下或两下 tab 键，补全项可以使用 ctrl+n/p/f/b上下左右切换。比如你想杀掉 java 的进程，只需要输入 kill java + tab键，如果只有一个 java 进程，zsh 会自动替换为进程的 pid，如果有多个则会出现选择项供你选择。ssh + 空格 + 两个tab键，zsh会列出所有访问过的主机和用户名进行补全</li>
<li>目录浏览和跳转：输入 d，即可列出你在这个会话里访问的目录列表，输入列表前的序号，即可直接跳转。</li>
<li>在当前目录下输入 .. 或 … ，或直接输入当前目录名都可以跳转，你甚至不再需要输入 cd 命令了。</li>
<li>通配符搜索：ls -l <em>*/</em>.sh，可以递归显示当前目录下的 shell 文件，文件少时可以代替 find，文件太多就歇菜了。</li>
</ul>

]]></content>
  </entry>
  
</feed>
